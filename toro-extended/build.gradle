/*
 * Copyright 2016 eneim@Eneim Labs, nam@ene.im
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

archivesBaseName = 'VideoListPlayer'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

ext {
  bintrayRepo = 'Toro'
  bintrayName = 'toro-extended'

  publishedGroupId = 'im.ene.toro2'
  artifact = 'toro-extended'
  libraryName = 'toro-extended'

  libraryDescription = 'Extended implementation for Toro with various new features, base on ExoPlayer v2'

  siteUrl = 'https://github.com/eneim/Toro'
  gitUrl = 'https://github.com/eneim/Toro.git'

  libraryVersion = rootProject.ext.libraryVersion

  developerId = 'eneim'
  developerName = 'Nam Nguyen'
  developerEmail = 'nam@ene.im'

  licenseName = 'The Apache Software License, Version 2.0'
  licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
  allLicenses = ["Apache-2.0"]
}

android {
  compileSdkVersion rootProject.ext.androidVersion
  buildToolsVersion rootProject.ext.buildToolVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSupportSDKVersion
    targetSdkVersion rootProject.ext.androidVersion
    versionCode version_code
    versionName "${lib_version}"
    buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    abortOnError false
  }

  signingConfigs {

    release {
      storeFile file('publish/weightWatchers.keystore')
      storePassword "${rootProject.ext.signing_config_password}"
      keyAlias "${rootProject.ext.signing_config_alias}"
      keyPassword "${rootProject.ext.signing_config_password}"
    }

    debug {
      storeFile file('publish/weightWatchers.keystore')
      storePassword "${rootProject.ext.signing_config_password}"
      keyAlias "${rootProject.ext.signing_config_alias}"
      keyPassword "${rootProject.ext.signing_config_password}"
    }
  }

  libraryVariants.all { variant ->
    variant.outputs.each { output ->
      def outputFile = output.outputFile

      if (outputFile != null && outputFile.name.endsWith('.aar')) {
        output.outputFile = new File(outputFile.parent, "${archivesBaseName}-${variant.buildType.name}.aar")
      }
    }
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  testCompile 'junit:junit:4.12'

  // Non default dependencies
  compile project(':toro')
  compile project(path: ':toro-ext-exoplayer2')
  // compile project(path: ':toro-ext-mediaplayer')
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId 'com.weightwatchers.videolistplayer'
      artifactId "${archivesBaseName}"
      version "${lib_version}"

      Artifact ("${buildDir}/outputs/aar/${archivesBaseName}-release.aar") {
        extension = 'aar'
      }

      // http://stackoverflow.com/a/24764713
      pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        configurations.compile.allDependencies.each {
          if (it.group) {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)

            if (it instanceof ModuleDependency) {
              def depExclusionsNode = dependencyNode.appendNode('exclusions')

              ((ModuleDependency) it).excludeRules.each {
                def exclusionNode = depExclusionsNode.appendNode('exclusion')
                exclusionNode.appendNode('groupId', it.group)
                exclusionNode.appendNode('artifactId', it.module)
              }
            }
          }
        }
      }
    }
  }

  repositories {
    maven {
      url "s3://androidrepos/releases"
      credentials(AwsCredentials) {
        accessKey rootProject.ext.ww_aws_access_key
        secretKey rootProject.ext.ww_secret_key
      }
    }
    mavenLocal()
  }
}

task sourceJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
}

// REF: https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en
// > gradlew install
// > gradlew bintrayUpload
apply from: '../.scripts/installv1.gradle'
apply from: '../.scripts/bintrayv1.gradle'
